let base:int = 16;

fn getMaxNum( n:int, arr[0]:int)->int{
    let return_:int = 0;
    let i:int = 0;
    while (i < n){
        if (arr[i] > return_) {return_ = arr[i];}
        i = i + 1;
    }
    ret return_;
}

fn getNumPos(num:int, pos:int)->int{
    let tmp:int = 1;
    let i:int = 0;
    while (i < pos){
        num = num / base;
        i = i + 1;
    }
    ret num -(num/ base)*base;
}

fn radixSort( bitround:int, a[0]:int, l:int, r:int){
    let head[16]:int;
    let  tail[16]:int;
    let cnt[16] :int;
    
    let iii:int=0;
    while(iii<base){
        head[iii]=0;
        tail[iii]=0;
        cnt[iii]=0;
        iii=iii+1;
    }

    if (bitround == -1 || (l + 1) >= r) {
        ret;
    }

        let i :int=l;
        
     

        while (i < r){
            let tmp_1:int=getNumPos(a[i], bitround);
            let tmp_2:int=getNumPos(a[i], bitround);
            cnt[tmp_2]
                = cnt[tmp_1] + 1;
            i = i + 1;
        }        
        head[0] = l;
        tail[0] = l + cnt[0];

        i = 1;
        while (i < base){
            let tmp:int=i-1;
            head[i] = tail[tmp];
            tail[i] = head[i] + cnt[i];
            i = i + 1;
        }
        i = 0;
        while (i < base){
            while (head[i] < tail[i]){
                let tmp:int =head[i];
                let  v:int = a[tmp];
                while (getNumPos(v, bitround) != i){
                    let t:int = v;
                    let tmp_1:int=getNumPos(t, bitround);
                    tmp_1=head[tmp_1];
                    v = a[tmp_1];
                    tmp_1=getNumPos(t, bitround);
                    tmp_1=head[tmp_1];
                    a[tmp_1] = t;
                    tmp_1=getNumPos(t, bitround);
                    let tmp_2:int=getNumPos(t, bitround);
                    head[tmp_2] = head[tmp_1] + 1;
                }
                let tmp_1:int=head[i];
                a[tmp_1] = v;
                head[i] = head[i] + 1;
            }
            i = i + 1;
        }
    

        i = l;
        
        head[0] = l;
        tail[0] = l + cnt[0];

        i = 0;
        while (i < base){
            if (i > 0){
                let tmp_1:int=i-1;
                head[i] = tail[tmp_1];
                tail[i] = head[i] + cnt[i];
            }
            radixSort(bitround - 1, a, head[i], tail[i]);
            i = i + 1;
        }
    

    ret;
}

let a[30000010]:int;
let ans:int;

fn main()->int{
    let n:int = getint();

    let i_:int=0;
    while(i_<n){
        a[i_]=getint();
        i_=i_+1;
    }

    _sysy_starttime(97);
   
    radixSort(8, a, 0, n);

    let i:int = 0;
    while (i < n){
        ans = ans + i * (a[i]-(a[i] / (2 + i))*(2+i));
        i = i + 1;
    }

    if (ans < 0){
        ans = -ans;
    }
    _sysy_stoptime(117);
    putint(ans);
    putch(10);
    ret 0;
}
