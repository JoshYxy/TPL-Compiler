let max:int = 1073741824;
fn checkrange( num:int)->int{
    while (num > max) {num = num - max;}
    while (num < 0) {num = num + max;}
    ret num;
}

fn mod(x:int,y:int)->int{
    ret x-(x/y)*y;
}
fn reduce( kernelid:int,  x:int,  y:int)->int{
    if (kernelid == 0) {
        ret checkrange(x+y);
    }
    if (kernelid == 1) {
        // x ^ y;
        let return_:int = 0;
        let i:int = 1;
        while (i < max){
            if (mod(x/i,2) == mod(y/i,2)) {
                return_ = return_ * 2;
            }
            else{
                return_ = return_ * 2 + 1;
            }
            i = i * 2;
        }
        ret return_;
    }
    if (kernelid == 2){
        if (x > y){ ret x;}
        else {ret y;}
    }
    if (kernelid == 3){
        // return_ x | y;

        let return_:int = 0;
        let i:int = 1;
        while (i < max){
            if ((mod(x/i,2) == 1) ||( mod(y/i,2) == 1)){
                return_ = return_ * 2 + 1;
            }
            else {
                return_ = return_ * 2;
            }
            i = i * 2;
        }
        ret return_;
    }
    if (kernelid == 4){
        // return_ x & y;
        let return_:int = 0;
        let i:int = 1;
        while (i < max){
            if ((mod(x/i,2) == 1) &&( mod(y/i,2) == 1)){
                return_ = return_ * 2 + 1;
            }
            else {
                return_ = return_ * 2;
            }
            i = i * 2;
        }
        ret return_;
    }
    ret 0;
}

fn getvalue(array[0]:int,  n:int,  m:int,  x:int,  y:int)->int{
    if ((x < 0) || (y < 0) || (x >= n) ||( y >= m)){ ret 0;}
    let tmp:int=x * m + y;
    ret array[tmp];
}

fn convn( kernelid:int,  input[0]:int,  output[0]:int,  n:int,  m:int,  c:int)->int{
    let i:int = 0;
    let j:int= 0;
    let x:int;
    let y:int;
    let curr:int;
    let true:int = 1;
    while (true == true){
        j = 0;
        while (true == true){
            curr = 0;
            x = i - c / 2;
            while (true == true){
                y = j - c / 2;
                while (true == true){
                    curr = reduce(kernelid, curr, getvalue(input, n, m, x, y));
                    y = y + 1;
                    if (y >= (j + c / 2)) {break;}
                }
                x = x + 1;
                if (x >= (i + c / 2)) {break;}
            }
            let tmp:int=i * m + j;
            output[tmp] = curr;
            j = j + 1;
            if (j >= m) {break;}
        }
        i = i + 1;
        if (i >= n) {break;}
    }
    ret 0;
}

let a[10000000]:int;
let  b[10000000]:int;
let  kernelid[10000]:int;

fn memmove( dst[0]:int,  src[0]:int,  n:int){
    let i:int = 0;
    while (i < n){
        dst[i] = src[i];
        i = i + 1;
    }
}

fn main()->int{
    let c:int = getint();
    let n:int = getint();
    let m:int = getint();
    let len:int;
    len=getint();
    let ii:int=0;
    while(ii<len){
        a[ii]=getint();
        ii=ii+1;
    }
    len=getint();
    ii=0;
    while(ii<len){
        kernelid[ii]=getint();
        ii=ii+1;
    }
     let task:int =len;
    
     _sysy_starttime(209);
    let i:int = 0;
    while (i < task){
        convn(kernelid[i], a, b, n, m, c);
        memmove(a, b, n * m);
        i = i + 1;
    }
    _sysy_stoptime(312);

    putarray(n * m, a);
    ret 0;
}